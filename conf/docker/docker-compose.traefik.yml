# Example docker-compose.yml exposing timestrap via Traefik v2.1

version: "3"

services:
  timestrap:
    container_name: timestrap
    image: my-timestrap-image:latest
    command: daphne timestrap.asgi:application --port 8899 --bind 0.0.0.0 -v2
    labels:
      traefik.enable: "true"
      traefik.http.routers.timestrap.rule: "Host(`timestrap.my.domain`)"
      traefik.http.routers.timestrap.entrypoints: "https"
      traefik.http.routers.timestrap.tls.certresolver: "letsencrypt"
      traefik.http.services.timestrap.loadbalancer.server.port: "8899"
      traefik.docker.network: "web"
    depends_on:
      - db
      - redis
    environment:
      - DJANGO_SETTINGS_MODULE=timestrap.settings.docker
      - SECRET_KEY=super-secret-key
      - POSTGRES_DB=timestrap
      - POSTGRES_USER=timestrap
      - POSTGRES_PASSWORD=timestrap
    networks:
      - timestrap_network
      - web

  db:
    image: postgres
    container_name: timestrap_postgres
    environment:
      - POSTGRES_DB=timestrap
      - POSTGRES_USER=timestrap
      - POSTGRES_PASSWORD=timestrap
      - PGDATA=/db-data
    volumes:
      - ./data:/db-data # mount a local directory as the Postgres Data directory (relative path)
    networks:
      - timestrap_network

  redis:
    image: redis
    container_name: timestrap_redis
    networks:
      - timestrap_network

networks:
  timestrap_network:
    external: false
  web:
    external: true